"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parsers = _interopRequireDefault(require("./parsers.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const space = '  ';
let spacesCount = 0;

const stringify = value => {
  const keys = Object.keys(value);
  const result = keys.map(key => `${space.repeat(spacesCount + 1)}${key}: ${value[key]}`);
  return `{\n  ${result.join('\n')}\n  ${space.repeat(spacesCount - 1)}}`;
};

const getSign = sign => {
  switch (sign) {
    case 'added':
      return '+ ';

    case 'removed':
      return '- ';

    default:
      return '  ';
  }
};

const formatter = diff => {
  const add = (acc, item) => {
    spacesCount += 2;
    const result = Array.isArray(item[1]) ? [...acc, `${space.repeat(spacesCount - 1)}${getSign(item[2])}${item[0]}: ${formatter(item[1])}\n`] : [...acc, `${space.repeat(spacesCount - 1)}${getSign(item[2])}${item[0]}: ${typeof item[1] === 'object' ? stringify(item[1]) : item[1]}\n`];
    spacesCount -= 2;
    return result;
  };

  return `{\n${diff.reduce(add, []).join('')}${space.repeat(spacesCount)}}`;
};

const genDiff = (pathToFile1, pathToFile2) => {
  const dataFile1 = (0, _parsers.default)(pathToFile1);
  const dataFile2 = (0, _parsers.default)(pathToFile2);

  const iter = (data1, data2) => {
    const data1keys = Object.keys(data1);
    const data2keys = Object.keys(data2);
    const dataKeys = Object.keys({ ...data1,
      ...data2
    });

    const add = (acc, key) => {
      if (data1keys.includes(key) && data2keys.includes(key)) {
        if (data1[key] === data2[key]) {
          return [...acc, [key, data1[key]]];
        }

        return typeof data1[key] === 'object' && typeof data2[key] === 'object' ? [...acc, [key, iter(data1[key], data2[key])]] : [...acc, [key, data2[key], 'added'], [key, data1[key], 'removed']];
      }

      return data1keys.includes(key) ? [...acc, [key, data1[key], 'removed']] : [...acc, [key, data2[key], 'added']];
    };

    return dataKeys.reduce(add, []);
  };

  return formatter(iter(dataFile1, dataFile2));
};

module.exports = genDiff;
var _default = genDiff;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJzcGFjZSIsInNwYWNlc0NvdW50Iiwic3RyaW5naWZ5IiwidmFsdWUiLCJrZXlzIiwiT2JqZWN0IiwicmVzdWx0IiwibWFwIiwia2V5IiwicmVwZWF0Iiwiam9pbiIsImdldFNpZ24iLCJzaWduIiwiZm9ybWF0dGVyIiwiZGlmZiIsImFkZCIsImFjYyIsIml0ZW0iLCJBcnJheSIsImlzQXJyYXkiLCJyZWR1Y2UiLCJnZW5EaWZmIiwicGF0aFRvRmlsZTEiLCJwYXRoVG9GaWxlMiIsImRhdGFGaWxlMSIsImRhdGFGaWxlMiIsIml0ZXIiLCJkYXRhMSIsImRhdGEyIiwiZGF0YTFrZXlzIiwiZGF0YTJrZXlzIiwiZGF0YUtleXMiLCJpbmNsdWRlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBRyxJQUFkO0FBRUEsSUFBSUMsV0FBVyxHQUFHLENBQWxCOztBQUVBLE1BQU1DLFNBQVMsR0FBSUMsS0FBRCxJQUFXO0FBQzNCLFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDRCxJQUFQLENBQVlELEtBQVosQ0FBYjtBQUNBLFFBQU1HLE1BQU0sR0FBR0YsSUFBSSxDQUFDRyxHQUFMLENBQVVDLEdBQUQsSUFBVSxHQUFFUixLQUFLLENBQUNTLE1BQU4sQ0FBYVIsV0FBVyxHQUFHLENBQTNCLENBQThCLEdBQUVPLEdBQUksS0FBSUwsS0FBSyxDQUFDSyxHQUFELENBQU0sRUFBeEUsQ0FBZjtBQUNBLFNBQVEsUUFBT0YsTUFBTSxDQUFDSSxJQUFQLENBQVksSUFBWixDQUFrQixPQUFNVixLQUFLLENBQUNTLE1BQU4sQ0FBYVIsV0FBVyxHQUFHLENBQTNCLENBQThCLEdBQXJFO0FBQ0QsQ0FKRDs7QUFNQSxNQUFNVSxPQUFPLEdBQUlDLElBQUQsSUFBVTtBQUN4QixVQUFRQSxJQUFSO0FBQ0UsU0FBSyxPQUFMO0FBQ0UsYUFBTyxJQUFQOztBQUNG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VCxDQURHLEdBRUgsQ0FBQyxHQUFHUSxHQUFKLEVBQVMsQ0FBQ1IsR0FBRCxFQUFNb0IsS0FBSyxDQUFDcEIsR0FBRCxDQUFYLEVBQWtCLE9BQWxCLENBQVQsRUFBcUMsQ0FBQ0EsR0FBRCxFQUFNbUIsS0FBSyxDQUFDbkIsR0FBRCxDQUFYLEVBQWtCLFNBQWxCLENBQXJDLENBRko7QUFHRDs7QUFDRCxhQUFPcUIsU0FBUyxDQUFDRyxRQUFWLENBQW1CeEIsR0FBbkIsSUFDSCxDQUFDLEdBQUdRLEdBQUosRUFBUyxDQUFDUixHQUFELEVBQU1tQixLQUFLLENBQUNuQixHQUFELENBQVgsRUFBa0IsU0FBbEIsQ0FBVCxDQURHLEdBRUgsQ0FBQyxHQUFHUSxHQUFKLEVBQVMsQ0FBQ1IsR0FBRCxFQUFNb0IsS0FBSyxDQUFDcEIsR0FBRCxDQUFYLEVBQWtCLE9BQWxCLENBQVQsQ0FGSjtBQUdELEtBWkQ7O0FBYUEsV0FBT3VCLFFBQVEsQ0FBQ1gsTUFBVCxDQUFnQkwsR0FBaEIsRUFBcUIsRUFBckIsQ0FBUDtBQUNELEdBbEJEOztBQW1CQSxTQUFPRixTQUFTLENBQUNhLElBQUksQ0FBQ0YsU0FBRCxFQUFZQyxTQUFaLENBQUwsQ0FBaEI7QUFDRCxDQXZCRDs7QUF5QkFRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmIsT0FBakI7ZUFFZUEsTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXJzZSBmcm9tICcuL3BhcnNlcnMuanMnO1xuXG5jb25zdCBzcGFjZSA9ICcgICc7XG5cbmxldCBzcGFjZXNDb3VudCA9IDA7XG5cbmNvbnN0IHN0cmluZ2lmeSA9ICh2YWx1ZSkgPT4ge1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModmFsdWUpO1xuICBjb25zdCByZXN1bHQgPSBrZXlzLm1hcCgoa2V5KSA9PiBgJHtzcGFjZS5yZXBlYXQoc3BhY2VzQ291bnQgKyAxKX0ke2tleX06ICR7dmFsdWVba2V5XX1gKTtcbiAgcmV0dXJuIGB7XFxuICAke3Jlc3VsdC5qb2luKCdcXG4nKX1cXG4gICR7c3BhY2UucmVwZWF0KHNwYWNlc0NvdW50IC0gMSl9fWA7XG59O1xuXG5jb25zdCBnZXRTaWduID0gKHNpZ24pID0+IHtcbiAgc3dpdGNoIChzaWduKSB7XG4gICAgY2FzZSAnYWRkZWQnOlxuICAgICAgcmV0dXJuICcrICc7XG4gICAgY2FzZSAncmVtb3ZlZCc6XG4gICAgICByZXR1cm4gJy0gJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcgICc7XG4gIH1cbn07XG5cbmNvbnN0IGZvcm1hdHRlciA9IChkaWZmKSA9PiB7XG4gIGNvbnN0IGFkZCA9IChhY2MsIGl0ZW0pID0+IHtcbiAgICBzcGFjZXNDb3VudCArPSAyO1xuICAgIGNvbnN0IHJlc3VsdCA9IEFycmF5LmlzQXJyYXkoaXRlbVsxXSlcbiAgICAgID8gWy4uLmFjYywgYCR7c3BhY2UucmVwZWF0KHNwYWNlc0NvdW50IC0gMSl9JHtnZXRTaWduKGl0ZW1bMl0pfSR7aXRlbVswXX06ICR7Zm9ybWF0dGVyKGl0ZW1bMV0pfVxcbmBdXG4gICAgICA6IFsuLi5hY2MsIGAke3NwYWNlLnJlcGVhdChzcGFjZXNDb3VudCAtIDEpfSR7Z2V0U2lnbihpdGVtWzJdKX0ke2l0ZW1bMF19OiAke3R5cGVvZiBpdGVtWzFdID09PSAnb2JqZWN0JyA/IHN0cmluZ2lmeShpdGVtWzFdKSA6IGl0ZW1bMV19XFxuYF07XG4gICAgc3BhY2VzQ291bnQgLT0gMjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICByZXR1cm4gYHtcXG4ke2RpZmYucmVkdWNlKGFkZCwgW10pLmpvaW4oJycpfSR7c3BhY2UucmVwZWF0KHNwYWNlc0NvdW50KX19YDtcbn07XG5cbmNvbnN0IGdlbkRpZmYgPSAocGF0aFRvRmlsZTEsIHBhdGhUb0ZpbGUyKSA9PiB7XG4gIGNvbnN0IGRhdGFGaWxlMSA9IHBhcnNlKHBhdGhUb0ZpbGUxKTtcbiAgY29uc3QgZGF0YUZpbGUyID0gcGFyc2UocGF0aFRvRmlsZTIpO1xuICBjb25zdCBpdGVyID0gKGRhdGExLCBkYXRhMikgPT4ge1xuICAgIGNvbnN0IGRhdGExa2V5cyA9IE9iamVjdC5rZXlzKGRhdGExKTtcbiAgICBjb25zdCBkYXRhMmtleXMgPSBPYmplY3Qua2V5cyhkYXRhMik7XG4gICAgY29uc3QgZGF0YUtleXMgPSBPYmplY3Qua2V5cyh7IC4uLmRhdGExLCAuLi5kYXRhMiB9KTtcbiAgICBjb25zdCBhZGQgPSAoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChkYXRhMWtleXMuaW5jbHVkZXMoa2V5KSAmJiBkYXRhMmtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBpZiAoZGF0YTFba2V5XSA9PT0gZGF0YTJba2V5XSkge1xuICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBba2V5LCBkYXRhMVtrZXldXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkYXRhMVtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGF0YTJba2V5XSA9PT0gJ29iamVjdCdcbiAgICAgICAgICA/IFsuLi5hY2MsIFtrZXksIGl0ZXIoZGF0YTFba2V5XSwgZGF0YTJba2V5XSldXVxuICAgICAgICAgIDogWy4uLmFjYywgW2tleSwgZGF0YTJba2V5XSwgJ2FkZGVkJ10sIFtrZXksIGRhdGExW2tleV0sICdyZW1vdmVkJ11dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGExa2V5cy5pbmNsdWRlcyhrZXkpXG4gICAgICAgID8gWy4uLmFjYywgW2tleSwgZGF0YTFba2V5XSwgJ3JlbW92ZWQnXV1cbiAgICAgICAgOiBbLi4uYWNjLCBba2V5LCBkYXRhMltrZXldLCAnYWRkZWQnXV07XG4gICAgfTtcbiAgICByZXR1cm4gZGF0YUtleXMucmVkdWNlKGFkZCwgW10pO1xuICB9O1xuICByZXR1cm4gZm9ybWF0dGVyKGl0ZXIoZGF0YUZpbGUxLCBkYXRhRmlsZTIpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuRGlmZjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuRGlmZjtcbiJdfQ==