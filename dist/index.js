"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parsers = _interopRequireDefault(require("./parsers.js"));

var _formatter = _interopRequireDefault(require("./formatters/formatter.js"));

var _formatterPlain = _interopRequireDefault(require("./formatters/formatterPlain.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const genDiff = (pathToFile1, pathToFile2, format) => {
  const dataFile1 = (0, _parsers.default)(pathToFile1);
  const dataFile2 = (0, _parsers.default)(pathToFile2);

  const iter = (data1, data2) => {
    const data1keys = Object.keys(data1);
    const data2keys = Object.keys(data2);
    const dataKeys = Object.keys({ ...data1,
      ...data2
    });

    const add = (acc, key) => {
      if (data1keys.includes(key) && data2keys.includes(key)) {
        if (data1[key] === data2[key]) {
          return [...acc, [key, data1[key]]];
        }

        return typeof data1[key] === 'object' && typeof data2[key] === 'object' ? [...acc, [key, iter(data1[key], data2[key])]] : [...acc, [key, data2[key], 'added'], [key, data1[key], 'deleted']];
      }

      return data1keys.includes(key) ? [...acc, [key, data1[key], 'deleted']] : [...acc, [key, data2[key], 'added']];
    };

    return dataKeys.reduce(add, []);
  };

  return format === 'plain' ? (0, _formatterPlain.default)(iter(dataFile1, dataFile2)) : (0, _formatter.default)(iter(dataFile1, dataFile2));
};

module.exports = genDiff;
var _default = genDiff;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJnZW5EaWZmIiwicGF0aFRvRmlsZTEiLCJwYXRoVG9GaWxlMiIsImZvcm1hdCIsImRhdGFGaWxlMSIsImRhdGFGaWxlMiIsIml0ZXIiLCJkYXRhMSIsImRhdGEyIiwiZGF0YTFrZXlzIiwiT2JqZWN0Iiwia2V5cyIsImRhdGEya2V5cyIsImRhdGFLZXlzIiwiYWRkIiwiYWNjIiwia2V5IiwiaW5jbHVkZXMiLCJyZWR1Y2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBRUE7Ozs7QUFFQSxNQUFNQSxPQUFPLEdBQUcsQ0FBQ0MsV0FBRCxFQUFjQyxXQUFkLEVBQTJCQyxNQUEzQixLQUFzQztBQUNwRCxRQUFNQyxTQUFTLEdBQUcsc0JBQU1ILFdBQU4sQ0FBbEI7QUFDQSxRQUFNSSxTQUFTLEdBQUcsc0JBQU1ILFdBQU4sQ0FBbEI7O0FBQ0EsUUFBTUksSUFBSSxHQUFHLENBQUNDLEtBQUQsRUFBUUMsS0FBUixLQUFrQjtBQUM3QixVQUFNQyxTQUFTLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZSixLQUFaLENBQWxCO0FBQ0EsVUFBTUssU0FBUyxHQUFHRixNQUFNLENBQUNDLElBQVAsQ0FBWUgsS0FBWixDQUFsQjtBQUNBLFVBQU1LLFFBQVEsR0FBR0gsTUFBTSxDQUFDQyxJQUFQLENBQVksRUFBRSxHQUFHSixLQUFMO0FBQVksU0FBR0M7QUFBZixLQUFaLENBQWpCOztBQUNBLFVBQU1NLEdBQUcsR0FBRyxDQUFDQyxHQUFELEVBQU1DLEdBQU4sS0FBYztBQUN4QixVQUFJUCxTQUFTLENBQUNRLFFBQVYsQ0FBbUJELEdBQW5CLEtBQTJCSixTQUFTLENBQUNLLFFBQVYsQ0FBbUJELEdBQW5CLENBQS9CLEVBQXdEO0FBQ3RELFlBQUlULEtBQUssQ0FBQ1MsR0FBRCxDQUFMLEtBQWVSLEtBQUssQ0FBQ1EsR0FBRCxDQUF4QixFQUErQjtBQUM3QixpQkFBTyxDQUFDLEdBQUdELEdBQUosRUFBUyxDQUFDQyxHQUFELEVBQU1ULEtBQUssQ0FBQ1MsR0FBRCxDQUFYLENBQVQsQ0FBUDtBQUNEOztBQUNELGVBQU8sT0FBT1QsS0FBSyxDQUFDUyxHQUFELENBQVosS0FBc0IsUUFBdEIsSUFBa0MsT0FBT1IsS0FBSyxDQUFDUSxHQUFELENBQVosS0FBc0IsUUFBeEQsR0FDSCxDQUFDLEdBQUdELEdBQUosRUFBUyxDQUFDQyxHQUFELEVBQU1WLElBQUksQ0FBQ0MsS0FBSyxDQUFDUyxHQUFELENBQU4sRUFBYVIsS0FBSyxDQUFDUSxHQUFELENBQWxCLENBQVYsQ0FBVCxDQURHLEdBRUgsQ0FBQyxHQUFHRCxHQUFKLEVBQVMsQ0FBQ0MsR0FBRCxFQUFNUixLQUFLLENBQUNRLEdBQUQsQ0FBWCxFQUFrQixPQUFsQixDQUFULEVBQXFDLENBQUNBLEdBQUQsRUFBTVQsS0FBSyxDQUFDUyxHQUFELENBQVgsRUFBa0IsU0FBbEIsQ0FBckMsQ0FGSjtBQUdEOztBQUNELGFBQU9QLFNBQVMsQ0FBQ1EsUUFBVixDQUFtQkQsR0FBbkIsSUFDSCxDQUFDLEdBQUdELEdBQUosRUFBUyxDQUFDQyxHQUFELEVBQU1ULEtBQUssQ0FBQ1MsR0FBRCxDQUFYLEVBQWtCLFNBQWxCLENBQVQsQ0FERyxHQUVILENBQUMsR0FBR0QsR0FBSixFQUFTLENBQUNDLEdBQUQsRUFBTVIsS0FBSyxDQUFDUSxHQUFELENBQVgsRUFBa0IsT0FBbEIsQ0FBVCxDQUZKO0FBR0QsS0FaRDs7QUFhQSxXQUFPSCxRQUFRLENBQUNLLE1BQVQsQ0FBZ0JKLEdBQWhCLEVBQXFCLEVBQXJCLENBQVA7QUFDRCxHQWxCRDs7QUFtQkEsU0FBT1gsTUFBTSxLQUFLLE9BQVgsR0FBcUIsNkJBQWVHLElBQUksQ0FBQ0YsU0FBRCxFQUFZQyxTQUFaLENBQW5CLENBQXJCLEdBQWtFLHdCQUFVQyxJQUFJLENBQUNGLFNBQUQsRUFBWUMsU0FBWixDQUFkLENBQXpFO0FBQ0QsQ0F2QkQ7O0FBeUJBYyxNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixPQUFqQjtlQUVlQSxPIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlIGZyb20gJy4vcGFyc2Vycy5qcyc7XG5cbmltcG9ydCBmb3JtYXR0ZXIgZnJvbSAnLi9mb3JtYXR0ZXJzL2Zvcm1hdHRlci5qcyc7XG5cbmltcG9ydCBmb3JtYXR0ZXJQbGFpbiBmcm9tICcuL2Zvcm1hdHRlcnMvZm9ybWF0dGVyUGxhaW4uanMnO1xuXG5jb25zdCBnZW5EaWZmID0gKHBhdGhUb0ZpbGUxLCBwYXRoVG9GaWxlMiwgZm9ybWF0KSA9PiB7XG4gIGNvbnN0IGRhdGFGaWxlMSA9IHBhcnNlKHBhdGhUb0ZpbGUxKTtcbiAgY29uc3QgZGF0YUZpbGUyID0gcGFyc2UocGF0aFRvRmlsZTIpO1xuICBjb25zdCBpdGVyID0gKGRhdGExLCBkYXRhMikgPT4ge1xuICAgIGNvbnN0IGRhdGExa2V5cyA9IE9iamVjdC5rZXlzKGRhdGExKTtcbiAgICBjb25zdCBkYXRhMmtleXMgPSBPYmplY3Qua2V5cyhkYXRhMik7XG4gICAgY29uc3QgZGF0YUtleXMgPSBPYmplY3Qua2V5cyh7IC4uLmRhdGExLCAuLi5kYXRhMiB9KTtcbiAgICBjb25zdCBhZGQgPSAoYWNjLCBrZXkpID0+IHtcbiAgICAgIGlmIChkYXRhMWtleXMuaW5jbHVkZXMoa2V5KSAmJiBkYXRhMmtleXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBpZiAoZGF0YTFba2V5XSA9PT0gZGF0YTJba2V5XSkge1xuICAgICAgICAgIHJldHVybiBbLi4uYWNjLCBba2V5LCBkYXRhMVtrZXldXV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHR5cGVvZiBkYXRhMVtrZXldID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgZGF0YTJba2V5XSA9PT0gJ29iamVjdCdcbiAgICAgICAgICA/IFsuLi5hY2MsIFtrZXksIGl0ZXIoZGF0YTFba2V5XSwgZGF0YTJba2V5XSldXVxuICAgICAgICAgIDogWy4uLmFjYywgW2tleSwgZGF0YTJba2V5XSwgJ2FkZGVkJ10sIFtrZXksIGRhdGExW2tleV0sICdkZWxldGVkJ11dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGExa2V5cy5pbmNsdWRlcyhrZXkpXG4gICAgICAgID8gWy4uLmFjYywgW2tleSwgZGF0YTFba2V5XSwgJ2RlbGV0ZWQnXV1cbiAgICAgICAgOiBbLi4uYWNjLCBba2V5LCBkYXRhMltrZXldLCAnYWRkZWQnXV07XG4gICAgfTtcbiAgICByZXR1cm4gZGF0YUtleXMucmVkdWNlKGFkZCwgW10pO1xuICB9O1xuICByZXR1cm4gZm9ybWF0ID09PSAncGxhaW4nID8gZm9ybWF0dGVyUGxhaW4oaXRlcihkYXRhRmlsZTEsIGRhdGFGaWxlMikpIDogZm9ybWF0dGVyKGl0ZXIoZGF0YUZpbGUxLCBkYXRhRmlsZTIpKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZ2VuRGlmZjtcblxuZXhwb3J0IGRlZmF1bHQgZ2VuRGlmZjtcbiJdfQ==